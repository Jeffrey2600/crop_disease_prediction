import os
import cv2
import matplotlib.pyplot as plt
import numpy as np
from keras.preprocessing.image import load_img, img_to_array
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Conv2D, Input, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split


# Preprocessing function for input image
def preprocess_image(img_path, target_size=(69, 69)):
    img = load_img(img_path, target_size=target_size)
    img_array = img_to_array(img)
    img_array = img_array / 255.0
    return img_array

# Model path
model_path = 'model.h5'

# If model does not exist, create and train the model
if not os.path.exists(model_path):
    le = LabelEncoder()
    data = '/content/Corn (Maize)'  # Adjust the path to your dataset
    train_dir = os.path.join(data, 'Train')

    x = []
    y = []
    for label in os.listdir(train_dir):
        label_dir = os.path.join(train_dir, label)
        for img_file in os.listdir(label_dir):
            img_path = os.path.join(label_dir, img_file)
            image = load_img(img_path, target_size=(69, 69))
            img_array = img_to_array(image)
            x.append(img_array)
            y.append(label)

    # Convert to numpy arrays
    x = np.array(x) / 255.0
    y = np.array(y)

    # Encode labels
    labels_encoded = le.fit_transform(y)
    y_categorical = to_categorical(labels_encoded)

    # Split into train and test sets
    x_train, x_test, y_train, y_test = train_test_split(x, y_categorical, test_size=0.2, random_state=42)

    # Create the model
    model = Sequential([
        Input((69, 69, 3)),
        Conv2D(32, (3, 3), activation='relu'),
        MaxPooling2D(2, 2),
        Dropout(0.25),
        Flatten(),
        Dense(128, activation='relu'),
        Dropout(0.5),
        Dense(4, activation='softmax')
    ])
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

    # Train the model
    model.fit(x_train, y_train, epochs=100, batch_size=32, validation_data=(x_test, y_test))

    # Save the trained model
    model.save(model_path)
else:
    # If model already exists, load the pre-trained model
    model = load_model(model_path)

# Test image path
img_path = r"/content/images.jpg"  # Provide the path to the image you want to classify

# Preprocess the image
img_array = preprocess_image(img_path, target_size=(69, 69))

# Make prediction
predictions = model.predict(np.expand_dims(img_array, axis=0))  # Add batch dimension
predicted_class = np.argmax(predictions, axis=1)

# Define class labels corresponding to the diseases
class_labels = ['Cercospora_Leaf_Spot', 'Common_Rust', 'Healthy', 'Northern_Leaf_Blight']

# Get the predicted label
predicted_label = class_labels[predicted_class[0]]

# Show the input image and predicted label
plt.imshow(cv2.cvtColor(cv2.imread(img_path), cv2.COLOR_BGR2RGB))
plt.title(f'Predicted: {predicted_label}')
plt.axis('off')
plt.show()

# Print the predicted label for debugging
print(f"Predicted class index: {predicted_class[0]}")
print(f"Predicted class label: {predicted_label}")

from flask import Flask, request, jsonify
from flask_cors import CORS
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import img_to_array, load_img
import numpy as np
import os
import base64
from io import BytesIO
from PIL import Image

app = Flask(__name__)
CORS(app)

# Load your CNN model
model = load_model('/content/model.h5')  # Adjust path if necessary
IMG_SIZE = (69, 69)  # Change to your model's input size


@app.route('/predict', methods=['POST'])
def predict():
    if 'image' not in request.files:
        return jsonify({'error': 'No image uploaded'}), 400

    file = request.files['image']
    if file:
        try:
            # Save the uploaded image temporarily
            filepath = os.path.join('/content', file.filename)
            file.save(filepath)

            # Preprocess the image
            img = load_img(filepath, target_size=IMG_SIZE)
            img_array = img_to_array(img) / 255.0
            img_array = np.expand_dims(img_array, axis=0)

            # Make predictions
            prediction = model.predict(img_array)
            os.remove(filepath)

            # Get the predicted class index and confidence
            predicted_class_idx = int(np.argmax(prediction, axis=1)[0])  # Convert to Python int
            confidence = float(prediction[0][predicted_class_idx])  # Convert to Python float

            # Define class labels
            class_labels = ['Cercospora_Leaf_Spot', 'Common_Rust', 'Healthy', 'Northern_Leaf_Blight']
            predicted_label = class_labels[predicted_class_idx]

            # Convert image to base64
            img_byte_arr = BytesIO()
            img.save(img_byte_arr, format='JPEG')
            img_base64 = base64.b64encode(img_byte_arr.getvalue()).decode('utf-8')

            # Return prediction and the base64 image
            return jsonify({
                'predicted_class': predicted_label,
                'confidence': confidence,
                'image': img_base64  # Base64 encoded image string
            })
        except Exception as e:
            return jsonify({'error': str(e)}), 500
    else:
        return jsonify({'error': 'File upload failed'}), 400

# Expose the app using ngrok
from pyngrok import ngrok
public_url = ngrok.connect(5000)
print(f"Public URL: {public_url}")

# Run the Flask app
app.run(port=5000)
